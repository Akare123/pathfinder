syntax = "proto3";

package starknet.state;

import "common.proto";

// optimized for flat storage, not through a trie (not sharing key prefixes)
message ContractStoredValue {
    starknet.common.Felt252 key = 1;
    starknet.common.Felt252 value = 2;
}

message StateDiff
{
    // a bit more efficient than the state sync separation
    message ContractDiff {
        starknet.common.Address          address    = 1;
        optional starknet.common.Felt252 nonce      = 2;
        optional starknet.common.Felt252 class_hash = 3;  // can change for replace_class or new contract
        repeated ContractStoredValue     values     = 4;
    }

    uint32   domain                      = 1;  // volition state domain
    repeated ContractDiff contract_diffs = 2;
}

message EntryPoint {
    starknet.common.Felt252 selector = 1;
    starknet.common.Felt252 offset = 2;
}

message Cairo0Class {
    bytes abi = 1;
    repeated EntryPoint externals = 2;
    repeated EntryPoint l1_handlers = 3;
    repeated EntryPoint constructors = 4;
    bytes program = 5;
}

message SierraEntryPoint {
    uint64 index = 1;
    starknet.common.Felt252 selector = 2;
}

message Cairo1EntryPoints {
    repeated SierraEntryPoint externals = 1;
    repeated SierraEntryPoint l1_handlers = 2;
    repeated SierraEntryPoint constructors = 3;
}

message Cairo1Class {
    bytes abi = 1;
    Cairo1EntryPoints entry_points = 2;
    repeated starknet.common.Felt252 program = 3;
    string contract_class_version = 4;
    bytes compiled = 5;
}

// is it better to separate the definition from the hashes? (will need to repeate the hashes
// for the definitions stream)
// or, make the definitions optional? maybe it is enough to know only that a class exists, not its definition
// which may be fetched lazily later.
message Class {
    oneof class {
        Cairo0Class cairo0 = 1;
        Cairo1Class cairo1 = 2;
    }
}

message Classes {
    uint32   domain        = 1;
    repeated Class classes = 2;
}
